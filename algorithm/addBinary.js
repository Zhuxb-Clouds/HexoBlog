// 示例 1:

// 输入: a = "11", b = "1"
// 输出: "100"
// 示例 2:

// 输入: a = "1010", b = "1011"
// 输出: "10101"
//  

// 提示：

// 每个字符串仅由字符 '0' 或 '1' 组成。
// 1 <= a.length, b.length <= 10^4
// 字符串如果不是 "0" ，就都不含前导零。



// var addBinary = function(a, b) {
//     result = parseInt(a,2)+parseInt(b,2)
    
//     return result.toString(2)
// };



var addBinary = function(a, b) {
    let adder = 0;
    let a1 = a.split('').reverse();
    let b1 = b.split('').reverse();
    let maxLength = a1.length > b1.length ? a1.length : b1.length;
    let res = [];
    for (let i=0; i<maxLength; i++) {
        let c1 = i < a1.length ? +a1[i] : 0;
        let c2 = i < b1.length ? +b1[i] : 0;
        let sum = c1 + c2 + adder;
        res.push(sum % 2);
        adder = Math.floor(sum / 2);
    }
    if (adder === 1) res.push(1);
    res.reverse();
    if (res[0] === 0 && res.length > 1) res.shift();
    return res.join('');
};

// var addBinary = function(a, b) {
//     A= a.split('')
//     B= b.split('')
//     //两种大情况：进位（1,1）和不进位（0,0）and（0,1）and(1,0)

        
//     }
// };

console.log(addBinary("10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101","110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011"));
// "110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000"
// 110111101100010011000101110110100000011101000101011001000000000000000000000000000000000000000000000

// "10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101"
// "110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011"